'use client'

import { useState } from 'react'
import { Settings, Calendar, Bell, Users, Link, Shield, Globe, Smartphone, Mail, Zap, Check, X, ExternalLink } from 'lucide-react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Switch } from '@/components/ui/switch'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Badge } from '@/components/ui/badge'
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'

interface Integration {
  id: string
  name: string
  description: string
  icon: string
  connected: boolean
  lastSync?: string
  features: string[]
  status: 'active' | 'error' | 'pending'
}

interface NotificationSettings {
  email: boolean
  push: boolean
  sms: boolean
  reminders: {
    meetings: boolean
    events: boolean
    deadlines: boolean
    followUps: boolean
  }
  timing: {
    beforeMeeting: string[]
    beforeEvent: string[]
    beforeDeadline: string[]
  }
}

const mockIntegrations: Integration[] = [
  {
    id: 'google-calendar',
    name: 'Google Calendar',
    description: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Calendar –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ —Å–æ–±—ã—Ç–∏–π',
    icon: 'üìÖ',
    connected: true,
    lastSync: '2024-01-15T10:30:00Z',
    features: ['–î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è', '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', '–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≤—Å—Ç—Ä–µ—á'],
    status: 'active'
  },
  {
    id: 'outlook',
    name: 'Microsoft Outlook',
    description: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Outlook Calendar –∏ Exchange',
    icon: 'üìß',
    connected: false,
    features: ['–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è', 'Email –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', 'Teams –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è'],
    status: 'pending'
  },
  {
    id: 'zoom',
    name: 'Zoom',
    description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ Zoom —Å—Å—ã–ª–æ–∫ –¥–ª—è –æ–Ω–ª–∞–π–Ω –≤—Å—Ç—Ä–µ—á',
    icon: 'üé•',
    connected: true,
    lastSync: '2024-01-15T09:15:00Z',
    features: ['–ê–≤—Ç–æ—Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å—Ç—Ä–µ—á–∏', '–ó–∞–ø–∏—Å—å –∑–≤–æ–Ω–∫–æ–≤', '–£—á–∞—Å—Ç–Ω–∏–∫–∏'],
    status: 'active'
  },
  {
    id: 'slack',
    name: 'Slack',
    description: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Å—Ç—Ä–µ—á–∞—Ö –∏ —Å–æ–±—ã—Ç–∏—è—Ö –≤ Slack –∫–∞–Ω–∞–ª–∞—Ö',
    icon: 'üí¨',
    connected: true,
    lastSync: '2024-01-15T11:00:00Z',
    features: ['–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–∞—Ö', '–°—Ç–∞—Ç—É—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ', '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥–µ'],
    status: 'active'
  },
  {
    id: 'telegram',
    name: 'Telegram Bot',
    description: '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞',
    icon: 'üì±',
    connected: false,
    features: ['–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', '–ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —á–∞—Ç'],
    status: 'pending'
  },
  {
    id: 'notion',
    name: 'Notion',
    description: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–º–µ—Ç–æ–∫ –∏ –ø–ª–∞–Ω–æ–≤ —Å Notion workspace',
    icon: 'üìù',
    connected: false,
    features: ['–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–º–µ—Ç–æ–∫', '–®–∞–±–ª–æ–Ω—ã –≤—Å—Ç—Ä–µ—á', '–ë–∞–∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤'],
    status: 'pending'
  }
]

export default function SettingsPanel() {
  const [integrations, setIntegrations] = useState(mockIntegrations)
  const [profile, setProfile] = useState({
    name: '–ê–ª–µ–∫—Å–µ–π –§–∞—É–Ω–¥–µ—Ä–æ–≤',
    email: 'alexey@startup.com',
    company: 'MyStartup',
    position: 'CEO & Founder',
    timezone: 'Europe/Moscow',
    language: 'ru',
    avatar: ''
  })

  const [notifications, setNotifications] = useState<NotificationSettings>({
    email: true,
    push: true,
    sms: false,
    reminders: {
      meetings: true,
      events: true,
      deadlines: true,
      followUps: true
    },
    timing: {
      beforeMeeting: ['15min', '1hour'],
      beforeEvent: ['1day', '1hour'],
      beforeDeadline: ['3days', '1day', '1hour']
    }
  })

  const toggleIntegration = (integrationId: string) => {
    setIntegrations(prev => prev.map(integration =>
      integration.id === integrationId
        ? { ...integration, connected: !integration.connected, lastSync: integration.connected ? undefined : new Date().toISOString() }
        : integration
    ))
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'active': return <Check className="w-4 h-4 text-green-500" />
      case 'error': return <X className="w-4 h-4 text-red-500" />
      case 'pending': return <Zap className="w-4 h-4 text-yellow-500" />
      default: return null
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active': return 'bg-green-100 text-green-800'
      case 'error': return 'bg-red-100 text-red-800'
      case 'pending': return 'bg-yellow-100 text-yellow-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  const handleSaveProfile = () => {
    console.log('Saving profile:', profile)
  }

  const handleSaveNotifications = () => {
    console.log('Saving notifications:', notifications)
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</h2>
          <p className="text-gray-600">–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</p>
        </div>
        <Settings className="w-8 h-8 text-gray-400" />
      </div>

      <Tabs defaultValue="profile" className="space-y-4">
        <TabsList>
          <TabsTrigger value="profile">–ü—Ä–æ—Ñ–∏–ª—å</TabsTrigger>
          <TabsTrigger value="integrations">–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏</TabsTrigger>
          <TabsTrigger value="notifications">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</TabsTrigger>
          <TabsTrigger value="privacy">–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å</TabsTrigger>
        </TabsList>

        <TabsContent value="profile" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <Users className="w-5 h-5" />
                <span>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</span>
              </CardTitle>
              <CardDescription>
                –û–±–Ω–æ–≤–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ –∏ —Å–≤–æ–µ–π –∫–æ–º–ø–∞–Ω–∏–∏
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="flex items-center space-x-6">
                <Avatar className="w-20 h-20">
                  <AvatarImage src={profile.avatar} />
                  <AvatarFallback className="text-xl">
                    {profile.name.split(' ').map(n => n[0]).join('').toUpperCase()}
                  </AvatarFallback>
                </Avatar>
                <div>
                  <Button variant="outline">–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ</Button>
                  <p className="text-sm text-gray-500 mt-2">–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: 400x400px</p>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-2">
                  <Label htmlFor="name">–ü–æ–ª–Ω–æ–µ –∏–º—è</Label>
                  <Input
                    id="name"
                    value={profile.name}
                    onChange={(e) => setProfile(prev => ({ ...prev, name: e.target.value }))}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="email">Email</Label>
                  <Input
                    id="email"
                    type="email"
                    value={profile.email}
                    onChange={(e) => setProfile(prev => ({ ...prev, email: e.target.value }))}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="company">–ö–æ–º–ø–∞–Ω–∏—è</Label>
                  <Input
                    id="company"
                    value={profile.company}
                    onChange={(e) => setProfile(prev => ({ ...prev, company: e.target.value }))}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="position">–î–æ–ª–∂–Ω–æ—Å—Ç—å</Label>
                  <Input
                    id="position"
                    value={profile.position}
                    onChange={(e) => setProfile(prev => ({ ...prev, position: e.target.value }))}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="timezone">–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å</Label>
                  <Select value={profile.timezone} onValueChange={(value) => setProfile(prev => ({ ...prev, timezone: value }))}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="Europe/Moscow">–ú–æ—Å–∫–≤–∞ (UTC+3)</SelectItem>
                      <SelectItem value="Europe/London">–õ–æ–Ω–¥–æ–Ω (UTC+0)</SelectItem>
                      <SelectItem value="America/New_York">–ù—å—é-–ô–æ—Ä–∫ (UTC-5)</SelectItem>
                      <SelectItem value="Asia/Singapore">–°–∏–Ω–≥–∞–ø—É—Ä (UTC+8)</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="language">–Ø–∑—ã–∫</Label>
                  <Select value={profile.language} onValueChange={(value) => setProfile(prev => ({ ...prev, language: value }))}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="ru">–†—É—Å—Å–∫–∏–π</SelectItem>
                      <SelectItem value="en">English</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <Button onClick={handleSaveProfile}>
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
              </Button>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="integrations" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <Link className="w-5 h-5" />
                <span>–í–Ω–µ—à–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏</span>
              </CardTitle>
              <CardDescription>
                –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {integrations.map((integration) => (
                  <div key={integration.id} className="border rounded-lg p-4 space-y-4">
                    <div className="flex items-start justify-between">
                      <div className="flex items-center space-x-3">
                        <div className="text-2xl">{integration.icon}</div>
                        <div>
                          <h3 className="font-semibold">{integration.name}</h3>
                          <p className="text-sm text-gray-600">{integration.description}</p>
                        </div>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Badge className={getStatusColor(integration.status)}>
                          {getStatusIcon(integration.status)}
                        </Badge>
                        <Switch
                          checked={integration.connected}
                          onCheckedChange={() => toggleIntegration(integration.id)}
                        />
                      </div>
                    </div>

                    <div className="space-y-2">
                      <h4 className="text-sm font-medium">–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</h4>
                      <ul className="text-sm text-gray-600 space-y-1">
                        {integration.features.map((feature, index) => (
                          <li key={index} className="flex items-center space-x-2">
                            <Check className="w-3 h-3 text-green-500" />
                            <span>{feature}</span>
                          </li>
                        ))}
                      </ul>
                    </div>

                    {integration.connected && integration.lastSync && (
                      <div className="text-xs text-gray-500">
                        –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {new Date(integration.lastSync).toLocaleString('ru-RU')}
                      </div>
                    )}

                    <div className="flex space-x-2">
                      <Button
                        variant={integration.connected ? "outline" : "default"}
                        size="sm"
                        onClick={() => toggleIntegration(integration.id)}
                      >
                        {integration.connected ? '–û—Ç–∫–ª—é—á–∏—Ç—å' : '–ü–æ–¥–∫–ª—é—á–∏—Ç—å'}
                      </Button>
                      {integration.connected && (
                        <Button variant="ghost" size="sm">
                          <ExternalLink className="w-4 h-4" />
                        </Button>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="notifications" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <Bell className="w-5 h-5" />
                <span>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</span>
              </CardTitle>
              <CardDescription>
                –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–ø–æ—Å–æ–±—ã –∏ –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="space-y-4">
                <h3 className="text-lg font-medium">–°–ø–æ—Å–æ–±—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h3>
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <Mail className="w-5 h-5 text-gray-500" />
                      <div>
                        <div className="font-medium">Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</div>
                        <div className="text-sm text-gray-600">–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ email</div>
                      </div>
                    </div>
                    <Switch
                      checked={notifications.email}
                      onCheckedChange={(checked) => setNotifications(prev => ({ ...prev, email: checked }))}
                    />
                  </div>

                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <Globe className="w-5 h-5 text-gray-500" />
                      <div>
                        <div className="font-medium">Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</div>
                        <div className="text-sm text-gray-600">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ</div>
                      </div>
                    </div>
                    <Switch
                      checked={notifications.push}
                      onCheckedChange={(checked) => setNotifications(prev => ({ ...prev, push: checked }))}
                    />
                  </div>

                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <Smartphone className="w-5 h-5 text-gray-500" />
                      <div>
                        <div className="font-medium">SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</div>
                        <div className="text-sm text-gray-600">–°—Ä–æ—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ SMS</div>
                      </div>
                    </div>
                    <Switch
                      checked={notifications.sms}
                      onCheckedChange={(checked) => setNotifications(prev => ({ ...prev, sms: checked }))}
                    />
                  </div>
                </div>
              </div>

              <div className="space-y-4">
                <h3 className="text-lg font-medium">–¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π</h3>
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <span>–í—Å—Ç—Ä–µ—á–∏ –∏ —Å–æ–∑–≤–æ–Ω—ã</span>
                    <Switch
                      checked={notifications.reminders.meetings}
                      onCheckedChange={(checked) => setNotifications(prev => ({
                        ...prev,
                        reminders: { ...prev.reminders, meetings: checked }
                      }))}
                    />
                  </div>

                  <div className="flex items-center justify-between">
                    <span>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è RoundC</span>
                    <Switch
                      checked={notifications.reminders.events}
                      onCheckedChange={(checked) => setNotifications(prev => ({
                        ...prev,
                        reminders: { ...prev.reminders, events: checked }
                      }))}
                    />
                  </div>

                  <div className="flex items-center justify-between">
                    <span>–î–µ–¥–ª–∞–π–Ω—ã</span>
                    <Switch
                      checked={notifications.reminders.deadlines}
                      onCheckedChange={(checked) => setNotifications(prev => ({
                        ...prev,
                        reminders: { ...prev.reminders, deadlines: checked }
                      }))}
                    />
                  </div>

                  <div className="flex items-center justify-between">
                    <span>Follow-up –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</span>
                    <Switch
                      checked={notifications.reminders.followUps}
                      onCheckedChange={(checked) => setNotifications(prev => ({
                        ...prev,
                        reminders: { ...prev.reminders, followUps: checked }
                      }))}
                    />
                  </div>
                </div>
              </div>

              <Button onClick={handleSaveNotifications}>
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
              </Button>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="privacy" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <Shield className="w-5 h-5" />
                <span>–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</span>
              </CardTitle>
              <CardDescription>
                –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –¥–æ—Å—Ç—É–ø–æ–º –∫ –¥–∞–Ω–Ω—ã–º –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <div>
                    <div className="font-medium">–ü—É–±–ª–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å</div>
                    <div className="text-sm text-gray-600">–†–∞–∑—Ä–µ—à–∏—Ç—å –¥—Ä—É–≥–∏–º –≤–∏–¥–µ—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å</div>
                  </div>
                  <Switch defaultChecked={false} />
                </div>

                <div className="flex items-center justify-between">
                  <div>
                    <div className="font-medium">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç —Å–æ–±—ã—Ç–∏–π</div>
                    <div className="text-sm text-gray-600">–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π</div>
                  </div>
                  <Switch defaultChecked={true} />
                </div>

                <div className="flex items-center justify-between">
                  <div>
                    <div className="font-medium">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</div>
                    <div className="text-sm text-gray-600">–ü–æ–º–æ—á—å —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –∞–Ω–æ–Ω–∏–º–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏</div>
                  </div>
                  <Switch defaultChecked={true} />
                </div>
              </div>

              <div className="pt-6 border-t">
                <h3 className="text-lg font-medium mb-4">–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</h3>
                <div className="space-y-2">
                  <Button variant="outline">–°–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤ –¥–∞–Ω–Ω—ã—Ö</Button>
                  <p className="text-sm text-gray-600">
                    –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–ø–∏—é –≤—Å–µ—Ö –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
                  </p>
                </div>
              </div>

              <div className="pt-6 border-t">
                <h3 className="text-lg font-medium mb-4 text-red-600">–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞</h3>
                <div className="space-y-2">
                  <Button variant="destructive">–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç</Button>
                  <p className="text-sm text-gray-600">
                    –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞.
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}
